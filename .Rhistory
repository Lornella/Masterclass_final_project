merged_pop_cases <- left_join(counts_measles, pop, by = c("country_code", "country_name", "year"))
View(merged_pop_cases)
merged_pop_cases <- left_join(counts_measles, pop, by = c("country_code", "year"))
View(merged_pop_cases)
View(vacc_measles)
#Get a county code for the vaccination dataset
vacc_measles <- vacc_measles %>%
mutate(country_code = countrycode(country,
"country.name",
"iso3c"))
#Get a county code for the vaccination dataset
vacc_measles <- vacc_measles %>%
mutate(country_code = countrycode(country_name,
"country.name",
"iso3c"))
View(vacc_measles)
setdiff(merged_pop_cases$country_code, vacc_measles$country_code)
setdiff(vacc_measles$country_code, merged_pop_cases$country_code)
merged_data <- left_join(merged_pop_cases, vacc_measles, by = c("country_code", "year"))
View(merged_data)
?countryname
merged_data <- left_join(merged_pop_cases,
vacc_measles,
by = c("country_code",
"year")) %>%
select(!"country_name",
"country_name.x",
"country_name.y")
merged_data <- left_join(merged_pop_cases,
vacc_measles,
by = c("country_code",
"year")) %>%
select(!c("country_name",
"country_name.x",
"country_name.y"))
merged_data <- left_join(merged_pop_cases,
vacc_measles,
by = c("country_code",
"year")) %>%
select(!c("country_name",
"country_name.x",
"country_name.y")) %>%
rename(region_code = ParentLocationCode,
region_name = ParentLocation)
#Final merging and cleaning
merged_data <- left_join(merged_pop_cases,
vacc_measles,
by = c("country_code",
"year")) %>%
select(!c("country_name",
"country_name.x",
"country_name.y")) %>%
rename(region_code = ParentLocationCode,
region_name = ParentLocation) %>%
countrycode::countryname(country_code,
destination = 'country.name')
#Final merging and cleaning
merged_data <- left_join(merged_pop_cases,
vacc_measles,
by = c("country_code",
"year")) %>%
select(!c("country_name",
"country_name.x",
"country_name.y")) %>%
rename(region_code = ParentLocationCode,
region_name = ParentLocation) %>%
mutate(country_name = countrycode::countryname(country_code,
destination = 'country.name'))
#Final merging and cleaning
merged_data <- left_join(merged_pop_cases,
vacc_measles,
by = c("country_code",
"year")) %>%
select(!c("country_name",
"country_name.x",
"country_name.y")) %>%
rename(region_code = ParentLocationCode,
region_name = ParentLocation) %>%
mutate(country_name = countrycode(country_code, origin = "iso3c", destination = "country.name"))
View(merged_pop_cases)
View(merged_data)
##Load data from csv and xls files
vacc_measles_dataset <- read_csv(here("data/gapminder_mcv2_vacc.csv"))
counts_measles_dataset <- read_csv(here("data/who_measles_counts.csv"))
pop_raw <- read_xls(here("data/worldbankdata_API_SP.POP.TOTL_DS2_en_excel_v2_31647_modifiedcopy.xls"))
## Look at the data
# glimpse(vacc_measles_dataset)
# glimpse(child_death_measles_dataset)
# glimpse(counts_measles_dataset)
# glimpse(pop)
## Data cleaning
vacc_measles <- vacc_measles_dataset %>%
pivot_longer(cols = `2000`:`2020`, names_to = "year", values_to = "vaccination_coverage_in_percent") %>%
mutate(year = as.numeric(year)) %>%
filter(year >= 2010) %>%
rename(country_name = country)
counts_measles <- counts_measles_dataset %>%
select(ParentLocationCode, ParentLocation, SpatialDimValueCode, Location, Period, FactValueNumeric) %>%
rename(year = Period, country_code = SpatialDimValueCode,  country_name = Location, measles_cases = FactValueNumeric) %>%
filter(year >= 2010 & year <= 2020)
pop <- pop_raw %>% pivot_longer(cols = `1960`:`2023`, names_to = "year", values_to = "population") %>%
select(!c(`Indicator Name`, `Indicator Code`)) %>%
mutate(year = as.numeric(year)) %>%
filter(year >= 2010 & year <= 2020) %>%
rename(country_name = `Country Name`, country_code = `Country Code`)
## Data merging
setdiff(counts_measles$country_code, pop$country_code)
#The output tell us that the following codes are not in pop: "AIA" "COK" "MSR" "NIU" "TKL" "WLF"
#From Chatgpt: These codes correspond to small islands and territories, many of which have unique political relationships, such as being dependencies or in free association with other countries.
#We can get rid of these.
setdiff(pop$country_code, counts_measles$country_code)
#The output tell us that the following codes are missing in counts_measles: "AFE" "AFW" "ARB" "CEB" "CHI" "CSS" "EAP" "EAR" "EAS" "ECA" "ECS" "EMU" "EUU" "FCS" "FRO" "GIB" "GRL" "HIC" "HPC" "IBD" "IBT" "IDA" "IDB" "IDX" "IMN" "INX" "LAC" "LCN" "LDC" "LIC" "LIE" "LMC" "LMY" "LTE" "MAF" "MEA" "MIC" "MNA" "NAC" "OED" "OSS" "PRE" "PRI" "PSS" "PST" "SAS" "SSA" "SSF" "SST" "TEA" "TEC" "TLA" "TMN" "TSA" "TSS" "UMC" "VIR" "WLD" "XKX"
# From ChatGPT: These codes represent regions, income classifications, or groups of countries, rather than individual nations. Many of them are used by international organizations like the World Bank to classify countries by income level, development stage, or geographic area.
# We can get rid of these.
counts_measles <- counts_measles %>%
filter(!country_code %in% c("AIA", "COK", "MSR", "NIU", "TKL", "WLF"))
#With a left_join we get rid of the country codes in pop that we don't need.
merged_pop_cases <- left_join(counts_measles, pop, by = c("country_code", "year"))
#Get a county code for the vaccination dataset
vacc_measles <- vacc_measles %>%
mutate(country_code = countrycode(country_name,
"country.name",
"iso3c"))
setdiff(merged_pop_cases$country_code, vacc_measles$country_code)
#The output shows that 30 country codes are missing in vacc_measles. These codes represent a mix of independent countries and territories across different regions of the world.
#We will keep these in.
setdiff(vacc_measles$country_code, merged_pop_cases$country_code)
#All country codes in vacc_measles are present in merged_pop_cases.
#Final merging and cleaning
merged_data <- left_join(merged_pop_cases,
vacc_measles,
by = c("country_code",
"year")) %>%
select(!c("country_name",
"country_name.x",
"country_name.y")) %>%
rename(region_code = ParentLocationCode,
region_name = ParentLocation) %>%
mutate(country_name = countrycode(country_code, origin = "iso3c", destination = "country.name"))
##Wanted to use child mortality data, but I let this out, as I could not find information about the numbers and these seem strange. The numbers should be the number of child deaths, but there are numbers with decimals. So I commented this part out.
# child_death_measles_dataset <- read_csv(here("data/gapminder_measles_deaths_in_children_1_59_months_total_deaths.csv"))
# child_death_measles <- child_death_measles_dataset %>%
#   mutate(`2018` = as.character(`2018`),
#          `2019` = as.character(`2019`)) %>%
#   pivot_longer(cols = `1990`:`2019`, names_to = "year", values_to = "child_death") %>%
#   mutate(child_death = str_replace_all(child_death, pattern = "k", replacement = "e3") %>%
#   str_replace_all(pattern = "M", replacement = "e6") %>%
#   as.numeric(child_death))
country_shapes <- rnaturalearth::ne_countries()
View(counts_measles_dataset)
View(country_shapes)
View(merged_data)
#Calculate incidence
merged_pop_cases_vacc <- merged_pop_cases_vacc %>%
mutate(incidence = measles_cases/pop*10000)
View(merged_data)
#Merging with vacc and cleaning
merged_pop_cases_vacc <- left_join(merged_pop_cases,
vacc_measles,
by = c("country_code",
"year")) %>%
select(!c("country_name",
"country_name.x",
"country_name.y")) %>%
rename(region_code = ParentLocationCode,
region_name = ParentLocation) %>%
mutate(country_name = countrycode(country_code, origin = "iso3c", destination = "country.name"))
#Calculate incidence
merged_pop_cases_vacc <- merged_pop_cases_vacc %>%
mutate(incidence = measles_cases/pop*10000)
glimpse(merged_pop_cases_vacc)
#Calculate incidence
merged_pop_cases_vacc <- merged_pop_cases_vacc %>%
mutate(incidence = measles_cases/pop)
pop <- pop_raw %>% pivot_longer(cols = `1960`:`2023`, names_to = "year", values_to = "population") %>%
select(!c(`Indicator Name`, `Indicator Code`)) %>%
mutate(year = as.numeric(year),
population = as.numeric(population)) %>%
filter(year >= 2010 & year <= 2020) %>%
rename(country_name = `Country Name`, country_code = `Country Code`)
counts_measles <- counts_measles_dataset %>%
select(ParentLocationCode, ParentLocation, SpatialDimValueCode, Location, Period, FactValueNumeric) %>%
rename(year = Period, country_code = SpatialDimValueCode,  country_name = Location, measles_cases = FactValueNumeric) %>%
mutate(measles_cases = as.numeric(measles_cases)) %>%
filter(year >= 2010 & year <= 2020)
counts_measles <- counts_measles %>%
filter(!country_code %in% c("AIA", "COK", "MSR", "NIU", "TKL", "WLF"))
merged_pop_cases <- left_join(counts_measles, pop, by = c("country_code", "year"))
#Get a county code for the vaccination dataset
vacc_measles <- vacc_measles %>%
mutate(country_code = countrycode(country_name,
"country.name",
"iso3c"))
setdiff(merged_pop_cases$country_code, vacc_measles$country_code)
#Merging with vacc and cleaning
merged_pop_cases_vacc <- left_join(merged_pop_cases,
vacc_measles,
by = c("country_code",
"year")) %>%
select(!c("country_name",
"country_name.x",
"country_name.y")) %>%
rename(region_code = ParentLocationCode,
region_name = ParentLocation) %>%
mutate(country_name = countrycode(country_code, origin = "iso3c", destination = "country.name"))
#Calculate incidence
merged_pop_cases_vacc <- merged_pop_cases_vacc %>%
mutate(incidence = measles_cases/pop)
#Merging with vacc and cleaning
merged_pop_cases_vacc <- left_join(merged_pop_cases,
vacc_measles,
by = c("country_code",
"year")) %>%
select(!c("country_name",
"country_name.x",
"country_name.y")) %>%
rename(region_code = ParentLocationCode,
region_name = ParentLocation) %>%
mutate(country_name = countrycode(country_code, origin = "iso3c", destination = "country.name"))
glimpse(merged_pop_cases_vacc)
glimpse(counts_measles)
##Load data from csv and xls files as well as from the package rnaturalearth
vacc_measles_dataset <- read_csv(here("data/gapminder_mcv2_vacc.csv"))
counts_measles_dataset <- read_csv(here("data/who_measles_counts.csv"))
pop_raw <- read_xls(here("data/worldbankdata_API_SP.POP.TOTL_DS2_en_excel_v2_31647_modifiedcopy.xls"))
country_shapes <- rnaturalearth::ne_countries()
## Look at the data
# glimpse(vacc_measles_dataset)
# glimpse(child_death_measles_dataset)
# glimpse(counts_measles_dataset)
# glimpse(pop)
## Data cleaning
vacc_measles <- vacc_measles_dataset %>%
pivot_longer(cols = `2000`:`2020`, names_to = "year", values_to = "vaccination_coverage_in_percent") %>%
mutate(year = as.numeric(year)) %>%
filter(year >= 2010) %>%
rename(country_name = country)
counts_measles <- counts_measles_dataset %>%
select(ParentLocationCode, ParentLocation, SpatialDimValueCode, Location, Period, FactValueNumeric) %>%
rename(year = Period, country_code = SpatialDimValueCode,  country_name = Location, measles_cases = FactValueNumeric) %>%
mutate(measles_cases = as.numeric(measles_cases)) %>%
filter(year >= 2010 & year <= 2020)
pop <- pop_raw %>% pivot_longer(cols = `1960`:`2023`, names_to = "year", values_to = "population") %>%
select(!c(`Indicator Name`, `Indicator Code`)) %>%
mutate(year = as.numeric(year),
population = as.numeric(population)) %>%
filter(year >= 2010 & year <= 2020) %>%
rename(country_name = `Country Name`, country_code = `Country Code`)
## Data merging
setdiff(counts_measles$country_code, pop$country_code)
#The output tell us that the following codes are not in pop: "AIA" "COK" "MSR" "NIU" "TKL" "WLF"
#From Chatgpt: These codes correspond to small islands and territories, many of which have unique political relationships, such as being dependencies or in free association with other countries.
#We can get rid of these.
setdiff(pop$country_code, counts_measles$country_code)
#The output tell us that the following codes are missing in counts_measles: "AFE" "AFW" "ARB" "CEB" "CHI" "CSS" "EAP" "EAR" "EAS" "ECA" "ECS" "EMU" "EUU" "FCS" "FRO" "GIB" "GRL" "HIC" "HPC" "IBD" "IBT" "IDA" "IDB" "IDX" "IMN" "INX" "LAC" "LCN" "LDC" "LIC" "LIE" "LMC" "LMY" "LTE" "MAF" "MEA" "MIC" "MNA" "NAC" "OED" "OSS" "PRE" "PRI" "PSS" "PST" "SAS" "SSA" "SSF" "SST" "TEA" "TEC" "TLA" "TMN" "TSA" "TSS" "UMC" "VIR" "WLD" "XKX"
# From ChatGPT: These codes represent regions, income classifications, or groups of countries, rather than individual nations. Many of them are used by international organizations like the World Bank to classify countries by income level, development stage, or geographic area.
# We can get rid of these.
counts_measles <- counts_measles %>%
filter(!country_code %in% c("AIA", "COK", "MSR", "NIU", "TKL", "WLF"))
#With a left_join we get rid of the country codes in pop that we don't need.
merged_pop_cases <- left_join(counts_measles, pop, by = c("country_code", "year"))
#Get a county code for the vaccination dataset
vacc_measles <- vacc_measles %>%
mutate(country_code = countrycode(country_name,
"country.name",
"iso3c"))
setdiff(merged_pop_cases$country_code, vacc_measles$country_code)
#The output shows that 30 country codes are missing in vacc_measles. These codes represent a mix of independent countries and territories across different regions of the world.
#We will keep these in.
setdiff(vacc_measles$country_code, merged_pop_cases$country_code)
#All country codes in vacc_measles are present in merged_pop_cases.
#Merging with vacc and cleaning
merged_pop_cases_vacc <- left_join(merged_pop_cases,
vacc_measles,
by = c("country_code",
"year")) %>%
select(!c("country_name",
"country_name.x",
"country_name.y")) %>%
rename(region_code = ParentLocationCode,
region_name = ParentLocation) %>%
mutate(country_name = countrycode(country_code, origin = "iso3c", destination = "country.name"))
#Calculate incidence
merged_pop_cases_vacc <- merged_pop_cases_vacc %>%
mutate(incidence = measles_cases/pop)
#Calculate incidence
merged_pop_cases_vacc <- merged_pop_cases_vacc %>%
mutate(measles_cases = as.numeric(measles_cases),
pop = as.numeric(pop)) %>%
mutate(incidence = measles_cases/pop)
#Calculate incidence
merged_pop_cases_vacc <- merged_pop_cases_vacc %>%   unnest(pop) %>%
mutate(measles_cases = as.numeric(measles_cases),
pop = as.numeric(pop)) %>%
mutate(incidence = measles_cases/pop)
str(merged_pop_cases_vacc$pop)
View(merged_pop_cases_vacc)
#Calculate incidence
merged_pop_cases_vacc <- merged_pop_cases_vacc %>%
mutate(measles_cases = as.numeric(measles_cases),
population = as.numeric(population)) %>%
mutate(incidence = measles_cases/pop)
#Calculate incidence
merged_pop_cases_vacc <- merged_pop_cases_vacc %>%
mutate(incidence = measles_cases/population)
#Calculate incidence
merged_pop_cases_vacc <- merged_pop_cases_vacc %>%
mutate(incidence = measles_cases/population*100000)
merged_pop_cases_vacc
# Load packages
if(!require(pacman)) install.packages("pacman")
pacman::p_load(here, readxl, tidyverse, countrycode, bslib, bsicons, shiny, rgeoboundaries, plotly, htmltools, reactable)
##Load data from csv and xls files as well as from the package rnaturalearth
vacc_measles_dataset <- read_csv(here("data/gapminder_mcv2_vacc.csv"))
counts_measles_dataset <- read_csv(here("data/who_measles_counts.csv"))
pop_raw <- read_xls(here("data/worldbankdata_API_SP.POP.TOTL_DS2_en_excel_v2_31647_modifiedcopy.xls"))
country_shapes <- rnaturalearth::ne_countries()
## Look at the data
# glimpse(vacc_measles_dataset)
# glimpse(child_death_measles_dataset)
# glimpse(counts_measles_dataset)
# glimpse(pop)
## Data cleaning
vacc_measles <- vacc_measles_dataset %>%
pivot_longer(cols = `2000`:`2020`, names_to = "year", values_to = "vaccination_coverage_in_percent") %>%
mutate(year = as.numeric(year)) %>%
filter(year >= 2010) %>%
rename(country_name = country)
counts_measles <- counts_measles_dataset %>%
select(ParentLocationCode, ParentLocation, SpatialDimValueCode, Location, Period, FactValueNumeric) %>%
rename(year = Period, country_code = SpatialDimValueCode,  country_name = Location, measles_cases = FactValueNumeric) %>%
filter(year >= 2010 & year <= 2020)
pop <- pop_raw %>% pivot_longer(cols = `1960`:`2023`, names_to = "year", values_to = "population") %>%
select(!c(`Indicator Name`, `Indicator Code`)) %>%
mutate(year = as.numeric(year)) %>%
filter(year >= 2010 & year <= 2020) %>%
rename(country_name = `Country Name`, country_code = `Country Code`)
## Data merging
#setdiff(counts_measles$country_code, pop$country_code)
#The output tell us that the following codes are not in pop: "AIA" "COK" "MSR" "NIU" "TKL" "WLF"
#From Chatgpt: These codes correspond to small islands and territories, many of which have unique political relationships, such as being dependencies or in free association with other countries.
#We can get rid of these.
#setdiff(pop$country_code, counts_measles$country_code)
#The output tell us that the following codes are missing in counts_measles: "AFE" "AFW" "ARB" "CEB" "CHI" "CSS" "EAP" "EAR" "EAS" "ECA" "ECS" "EMU" "EUU" "FCS" "FRO" "GIB" "GRL" "HIC" "HPC" "IBD" "IBT" "IDA" "IDB" "IDX" "IMN" "INX" "LAC" "LCN" "LDC" "LIC" "LIE" "LMC" "LMY" "LTE" "MAF" "MEA" "MIC" "MNA" "NAC" "OED" "OSS" "PRE" "PRI" "PSS" "PST" "SAS" "SSA" "SSF" "SST" "TEA" "TEC" "TLA" "TMN" "TSA" "TSS" "UMC" "VIR" "WLD" "XKX"
# From ChatGPT: These codes represent regions, income classifications, or groups of countries, rather than individual nations. Many of them are used by international organizations like the World Bank to classify countries by income level, development stage, or geographic area.
# We can get rid of these.
counts_measles <- counts_measles %>%
filter(!country_code %in% c("AIA", "COK", "MSR", "NIU", "TKL", "WLF"))
#With a left_join we get rid of the country codes in pop that we don't need.
merged_pop_cases <- left_join(counts_measles, pop, by = c("country_code", "year"))
#Get a county code for the vaccination dataset
vacc_measles <- vacc_measles %>%
mutate(country_code = countrycode(country_name,
"country.name",
"iso3c"))
#setdiff(merged_pop_cases$country_code, vacc_measles$country_code)
#The output shows that 30 country codes are missing in vacc_measles. These codes represent a mix of independent countries and territories across different regions of the world.
#We will keep these in.
#setdiff(vacc_measles$country_code, merged_pop_cases$country_code)
#All country codes in vacc_measles are present in merged_pop_cases.
#Merging with vacc and cleaning
merged_pop_cases_vacc <- left_join(merged_pop_cases,
vacc_measles,
by = c("country_code",
"year")) %>%
select(!c("country_name",
"country_name.x",
"country_name.y")) %>%
rename(region_code = ParentLocationCode,
region_name = ParentLocation) %>%
mutate(country_name = countrycode(country_code, origin = "iso3c", destination = "country.name"))
#Calculate incidence
merged_pop_cases_vacc <- merged_pop_cases_vacc %>%
mutate(incidence = measles_cases/population*100000)
##Wanted to use child mortality data, but I let this out, as I could not find information about the numbers and these seem strange. The numbers should be the number of child deaths, but there are numbers with decimals. So I commented this part out.
# child_death_measles_dataset <- read_csv(here("data/gapminder_measles_deaths_in_children_1_59_months_total_deaths.csv"))
# child_death_measles <- child_death_measles_dataset %>%
#   mutate(`2018` = as.character(`2018`),
#          `2019` = as.character(`2019`)) %>%
#   pivot_longer(cols = `1990`:`2019`, names_to = "year", values_to = "child_death") %>%
#   mutate(child_death = str_replace_all(child_death, pattern = "k", replacement = "e3") %>%
#   str_replace_all(pattern = "M", replacement = "e6") %>%
#   as.numeric(child_death))
merged_pop_cases_vacc
View(merged_pop_cases_vacc)
highest_vacc_coverage_country <- merged_pop_cases_vacc %>%   dplyr::arrange(-vaccination_coverage_in_percent) %>%
head(1) %>%
pull(country)
highest_vacc_coverage_country <- merged_pop_cases_vacc %>%   dplyr::arrange(-vaccination_coverage_in_percent) %>%
head(1) %>%
pull(country_name)
highest_vacc_coverage_num <- merged_pop_cases_vacc %>%   dplyr::arrange(-vaccination_coverage_in_percent) %>%
head(1) %>%
pull(vaccination_coverage_in_percent)
round(1)
highest_vacc_coverage_country <- merged_pop_cases_vacc %>%   dplyr::arrange(-vaccination_coverage_in_percent) %>%
head(1) %>%
pull(country_name)
highest_vacc_coverage_num <- merged_pop_cases_vacc %>%   dplyr::arrange(-vaccination_coverage_in_percent) %>%
head(1) %>%
pull(vaccination_coverage_in_percent)
round(1)
highest_vacc_coverage_country <- merged_pop_cases_vacc %>%
dplyr::filter(year == 2020) %>%
dplyr::arrange(-vaccination_coverage_in_percent) %>%
head(1) %>%
pull(country_name)
highest_vacc_coverage_num <- merged_pop_cases_vacc %>%
dplyr::filter(year == 2020) %>%
dplyr::arrange(-vaccination_coverage_in_percent) %>%
head(1) %>%
pull(vaccination_coverage_in_percent)
round(1)
highest_vacc_coverage_country <- merged_pop_cases_vacc %>%
dplyr::filter(year == 2020) %>%
dplyr::arrange(-vaccination_coverage_in_percent)
View(highest_vacc_coverage_country)
number_of_countries_over_95_in2020 <- data2020 %>%
filter(vaccination_coverage_in_percent >=95) %>%
summarise(n = n())
data2020 <- merged_pop_cases_vacc %>%
dplyr::filter(year == 2020)
number_of_countries_over_95_in2020 <- data2020 %>%
filter(vaccination_coverage_in_percent >=95) %>%
summarise(n = n())
View(number_of_countries_over_95_in2020)
View(data2020)
data2020 <- merged_pop_cases_vacc %>%
dplyr::filter(year == 2020)
number_of_countries_in_dataset <- merged_pop_cases_vacc %>%
unique(country_name)
number_of_countries_in_dataset <- merged_pop_cases_vacc %>%
unique(country_name) %>%
sum(n = n())
number_of_countries_in_dataset <- merged_pop_cases_vacc %>%
unique(merged_pop_cases_vacc$country_name) %>%
sum(n = n())
data2020 <- merged_pop_cases_vacc %>%
dplyr::filter(year == 2020)
number_of_countries_in_dataset <- data2020 %>%
summarise(n = n())
number_of_countries_over_95_in2020 <- data2020 %>%
filter(vaccination_coverage_in_percent >=95) %>%
summarise(n = n())
highest_vacc_coverage_country <- merged_pop_cases_vacc %>%
dplyr::arrange(-vaccination_coverage_in_percent) %>%
head(1) %>%
pull(country_name)
highest_vacc_coverage_num <- merged_pop_cases_vacc %>%
dplyr::filter(year == 2020) %>%
dplyr::arrange(-vaccination_coverage_in_percent) %>%
head(1) %>%
pull(vaccination_coverage_in_percent)
round(1)
View(number_of_countries_in_dataset)
lowest_vacc_coverage_country_2020 <- data2020 %>%
dplyr::arrange(vaccination_coverage_in_percent) %>%
head(1) %>%
pull(country_name)
lowest_vacc_coverage_num_2020 <- data2020 %>%
dplyr::arrange(vaccination_coverage_in_percent) %>%
head(1) %>%
pull(vaccination_coverage_in_percent)
highest_incidence_2020_country <- data2020 %>%
dplyr::arrange(-incidence) %>%
head(1) %>%
pull(country_name)
highest_incidence_2020_number <- data2020 %>%
dplyr::arrange(-incidence) %>%
head(1) %>%
pull(incidence)
View(counts_measles)
country_shapes <- rnaturalearth::ne_countries()
# ggplot(country_shapes)+
#   geom_sf()
gap_07 <- gap_07 %>%
mutate(country_code = countrycode(country,
"country.name",
"iso3c"))
#Get country shapes from rnaturalearth packages
country_shapes <- rnaturalearth::ne_countries()
setdiff(data2020$country_code, country_shapes$adm0_a3)
View(data2020)
vac_map <- left_join(country_shapes, data2020,
by = c("adm0_a3" = "country_code")) %>%
mutate(tooltip_label = paste(country, ":",
vaccination_coverage_in_percent, "%")) %>%
ggplot()+
geom_sf(aes(fill = lifeExp, text = tooltip_label))+
theme_void()+
theme(legend.position = "none")
vac_map <- left_join(country_shapes, data2020,
by = c("adm0_a3" = "country_code")) %>%
mutate(tooltip_label = paste(country_name, ":",
vaccination_coverage_in_percent, "%")) %>%
ggplot()+
geom_sf(aes(fill = lifeExp, text = tooltip_label))+
theme_void()+
theme(legend.position = "none")
gap_map_ggplotly <- ggplotly(gap_map, tooltip = "text")
vac_map_ggplotly <- ggplotly(vac_map, tooltip = "text")
vac_map <- left_join(country_shapes, data2020,
by = c("adm0_a3" = "country_code")) %>%
mutate(tooltip_label = paste(country_name, ":",
vaccination_coverage_in_percent, "%")) %>%
ggplot()+
geom_sf(aes(fill = vaccination_coverage_in_percent, text = tooltip_label))+
theme_void()+
theme(legend.position = "none")
vac_map_ggplotly <- ggplotly(vac_map, tooltip = "text")
---
title: "Measles Dashboard"
