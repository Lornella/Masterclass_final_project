merged_pop_cases <- left_join(counts_measles, pop, by = c("country_code", "year"))
#Get a county code for the vaccination dataset
vacc_measles <- vacc_measles %>%
mutate(country_code = countrycode(country_name,
"country.name",
"iso3c"))
#setdiff(merged_pop_cases$country_code, vacc_measles$country_code)
#The output shows that 30 country codes are missing in vacc_measles. These codes represent a mix of independent countries and territories across different regions of the world.
#We will keep these in.
#setdiff(vacc_measles$country_code, merged_pop_cases$country_code)
#All country codes in vacc_measles are present in merged_pop_cases.
#Merging with vacc and cleaning
merged_pop_cases_vacc <- left_join(merged_pop_cases,
vacc_measles,
by = c("country_code",
"year")) %>%
select(!c("country_name",
"country_name.x",
"country_name.y")) %>%
rename(region_code = ParentLocationCode,
region_name = ParentLocation) %>%
mutate(country_name = countrycode(country_code, origin = "iso3c", destination = "country.name"))
#Calculate incidence
merged_pop_cases_vacc <- merged_pop_cases_vacc %>%
mutate(incidence = measles_cases/population*100000)
##Wanted to use child mortality data, but I let this out, as I could not find information about the numbers and these seem strange. The numbers should be the number of child deaths, but there are numbers with decimals. So I commented this part out.
# child_death_measles_dataset <- read_csv(here("data/gapminder_measles_deaths_in_children_1_59_months_total_deaths.csv"))
# child_death_measles <- child_death_measles_dataset %>%
#   mutate(`2018` = as.character(`2018`),
#          `2019` = as.character(`2019`)) %>%
#   pivot_longer(cols = `1990`:`2019`, names_to = "year", values_to = "child_death") %>%
#   mutate(child_death = str_replace_all(child_death, pattern = "k", replacement = "e3") %>%
#   str_replace_all(pattern = "M", replacement = "e6") %>%
#   as.numeric(child_death))
data2020 <- merged_pop_cases_vacc %>%
dplyr::filter(year == 2020)
number_of_countries_in_dataset <- data2020 %>%
summarise(n = n())
number_of_countries_over_95_in2020 <- data2020 %>%
filter(vaccination_coverage_in_percent >=95) %>%
summarise(n = n())
lowest_vacc_coverage_2020_country <- data2020 %>%
dplyr::arrange(vaccination_coverage_in_percent) %>%
head(1) %>%
pull(country_name)
lowest_vacc_coverage_2020_number <- data2020 %>%
dplyr::arrange(vaccination_coverage_in_percent) %>%
head(1) %>%
pull(vaccination_coverage_in_percent) %>%
round(1)
highest_incidence_2020_country <- data2020 %>%
dplyr::arrange(-incidence) %>%
head(1) %>%
pull(country_name)
highest_incidence_2020_number <- data2020 %>%
dplyr::arrange(-incidence) %>%
head(1) %>%
pull(incidence) %>%
round(1)
#Get country shapes from rnaturalearth packages
country_shapes <- rnaturalearth::ne_countries()
#setdiff(data2020$country_code, country_shapes$adm0_a3)
#The difference are small islands. Ok to let them out.
#vaccination coverage map
vac_map <- left_join(country_shapes, data2020,
by = c("adm0_a3" = "country_code")) %>%
mutate(tooltip_label = paste0(country_name, " : ",
vaccination_coverage_in_percent, " %")) %>%
ggplot()+
geom_sf(aes(fill = vaccination_coverage_in_percent, text = tooltip_label))+
theme_void()+
theme(legend.position = "none")
vac_map_ggplotly <- ggplotly(vac_map, tooltip = "text")
#incidence map
inc_map <- left_join(country_shapes, data2020,
by = c("adm0_a3" = "country_code")) %>%
mutate(tooltip_label = paste0(country_name, " : ",
round(incidence, 2), " per 100000")) %>%
ggplot()+
geom_sf(aes(fill = incidence, text = tooltip_label))+
scale_fill_manual(values = colors,
name = "Incidence per 100 000",
breaks = c(0, 10, 50, 100, 500),
labels = c("0", "10", "50", "100", "500+"),
guide = guide_colorbar(barwidth = 10, barheight = 1)
) +
theme_void() +
theme(
legend.position = "right",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
inc_map_ggplotly <- ggplotly(inc_map, tooltip = "text")
#incidence map
inc_map <- left_join(country_shapes, data2020,
by = c("adm0_a3" = "country_code")) %>%
mutate(tooltip_label = paste0(country_name, " : ",
round(incidence, 2), " per 100000")) %>%
ggplot()+
geom_sf(aes(fill = incidence, text = tooltip_label))+
scale_fill_gradient(values = colors,
name = "Incidence per 100 000",
breaks = c(0, 10, 50, 100, 500),
labels = c("0", "10", "50", "100", "500+"),
guide = guide_colorbar(barwidth = 10, barheight = 1)
) +
theme_void() +
theme(
legend.position = "right",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
#incidence map
inc_map <- left_join(country_shapes, data2020,
by = c("adm0_a3" = "country_code")) %>%
mutate(tooltip_label = paste0(country_name, " : ",
round(incidence, 2), " per 100000")) %>%
ggplot()+
geom_sf(aes(fill = incidence, text = tooltip_label))+
scale_fill_gradient(values = colors,
name = "Incidence per 100 000",
breaks = c(0, 10, 50, 100, 500),
labels = c("0", "10", "50", "100", "500+"),
guide = guide_colorbar(barwidth = 10, barheight = 1)
) +
theme_void() +
theme(
legend.position = "right",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
#incidence map
inc_map <- left_join(country_shapes, data2020,
by = c("adm0_a3" = "country_code")) %>%
mutate(tooltip_label = paste0(country_name, " : ",
round(incidence, 2), " per 100000")) %>%
ggplot()+
geom_sf(aes(fill = incidence, text = tooltip_label))+
scale_fill_gradient(colors = colors,
name = "Incidence per 100 000",
breaks = c(0, 10, 50, 100, 500),
labels = c("0", "10", "50", "100", "500+"),
guide = guide_colorbar(barwidth = 10, barheight = 1)
) +
theme_void() +
theme(
legend.position = "right",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
# Load packages
if(!require(pacman)) install.packages("pacman")
pacman::p_load(here, readxl, tidyverse, countrycode, bslib, bsicons, shiny, rgeoboundaries, plotly, htmltools, reactable)
##Create a palette
color_scale <- c("#78c2ad", "#6caf9c", "#609b8a", "#548879", "#487468", "#3c6157", "#304e45", "#243a34", "#182723", "#0c1311", "#000000")
##Load data from csv and xls files as well as from the package rnaturalearth
vacc_measles_dataset <- read_csv(here("data/gapminder_mcv2_vacc.csv"))
counts_measles_dataset <- read_csv(here("data/who_measles_counts.csv"))
pop_raw <- read_xls(here("data/worldbankdata_API_SP.POP.TOTL_DS2_en_excel_v2_31647_modifiedcopy.xls"))
country_shapes <- rnaturalearth::ne_countries()
## Look at the data
# glimpse(vacc_measles_dataset)
# glimpse(child_death_measles_dataset)
# glimpse(counts_measles_dataset)
# glimpse(pop)
## Data cleaning
vacc_measles <- vacc_measles_dataset %>%
pivot_longer(cols = `2000`:`2020`, names_to = "year", values_to = "vaccination_coverage_in_percent") %>%
mutate(year = as.numeric(year)) %>%
filter(year >= 2010) %>%
rename(country_name = country)
counts_measles <- counts_measles_dataset %>%
select(ParentLocationCode, ParentLocation, SpatialDimValueCode, Location, Period, FactValueNumeric) %>%
rename(year = Period, country_code = SpatialDimValueCode,  country_name = Location, measles_cases = FactValueNumeric) %>%
filter(year >= 2010 & year <= 2020)
pop <- pop_raw %>% pivot_longer(cols = `1960`:`2023`, names_to = "year", values_to = "population") %>%
select(!c(`Indicator Name`, `Indicator Code`)) %>%
mutate(year = as.numeric(year)) %>%
filter(year >= 2010 & year <= 2020) %>%
rename(country_name = `Country Name`, country_code = `Country Code`)
## Data merging
#setdiff(counts_measles$country_code, pop$country_code)
#The output tell us that the following codes are not in pop: "AIA" "COK" "MSR" "NIU" "TKL" "WLF"
#From Chatgpt: These codes correspond to small islands and territories, many of which have unique political relationships, such as being dependencies or in free association with other countries.
#We can get rid of these.
#setdiff(pop$country_code, counts_measles$country_code)
#The output tell us that the following codes are missing in counts_measles: "AFE" "AFW" "ARB" "CEB" "CHI" "CSS" "EAP" "EAR" "EAS" "ECA" "ECS" "EMU" "EUU" "FCS" "FRO" "GIB" "GRL" "HIC" "HPC" "IBD" "IBT" "IDA" "IDB" "IDX" "IMN" "INX" "LAC" "LCN" "LDC" "LIC" "LIE" "LMC" "LMY" "LTE" "MAF" "MEA" "MIC" "MNA" "NAC" "OED" "OSS" "PRE" "PRI" "PSS" "PST" "SAS" "SSA" "SSF" "SST" "TEA" "TEC" "TLA" "TMN" "TSA" "TSS" "UMC" "VIR" "WLD" "XKX"
# From ChatGPT: These codes represent regions, income classifications, or groups of countries, rather than individual nations. Many of them are used by international organizations like the World Bank to classify countries by income level, development stage, or geographic area.
# We can get rid of these.
counts_measles <- counts_measles %>%
filter(!country_code %in% c("AIA", "COK", "MSR", "NIU", "TKL", "WLF"))
#With a left_join we get rid of the country codes in pop that we don't need.
merged_pop_cases <- left_join(counts_measles, pop, by = c("country_code", "year"))
#Get a county code for the vaccination dataset
vacc_measles <- vacc_measles %>%
mutate(country_code = countrycode(country_name,
"country.name",
"iso3c"))
#setdiff(merged_pop_cases$country_code, vacc_measles$country_code)
#The output shows that 30 country codes are missing in vacc_measles. These codes represent a mix of independent countries and territories across different regions of the world.
#We will keep these in.
#setdiff(vacc_measles$country_code, merged_pop_cases$country_code)
#All country codes in vacc_measles are present in merged_pop_cases.
#Merging with vacc and cleaning
merged_pop_cases_vacc <- left_join(merged_pop_cases,
vacc_measles,
by = c("country_code",
"year")) %>%
select(!c("country_name",
"country_name.x",
"country_name.y")) %>%
rename(region_code = ParentLocationCode,
region_name = ParentLocation) %>%
mutate(country_name = countrycode(country_code, origin = "iso3c", destination = "country.name"))
#Calculate incidence
merged_pop_cases_vacc <- merged_pop_cases_vacc %>%
mutate(incidence = measles_cases/population*100000)
##Wanted to use child mortality data, but I let this out, as I could not find information about the numbers and these seem strange. The numbers should be the number of child deaths, but there are numbers with decimals. So I commented this part out.
# child_death_measles_dataset <- read_csv(here("data/gapminder_measles_deaths_in_children_1_59_months_total_deaths.csv"))
# child_death_measles <- child_death_measles_dataset %>%
#   mutate(`2018` = as.character(`2018`),
#          `2019` = as.character(`2019`)) %>%
#   pivot_longer(cols = `1990`:`2019`, names_to = "year", values_to = "child_death") %>%
#   mutate(child_death = str_replace_all(child_death, pattern = "k", replacement = "e3") %>%
#   str_replace_all(pattern = "M", replacement = "e6") %>%
#   as.numeric(child_death))
data2020 <- merged_pop_cases_vacc %>%
dplyr::filter(year == 2020)
number_of_countries_in_dataset <- data2020 %>%
summarise(n = n())
number_of_countries_over_95_in2020 <- data2020 %>%
filter(vaccination_coverage_in_percent >=95) %>%
summarise(n = n())
lowest_vacc_coverage_2020_country <- data2020 %>%
dplyr::arrange(vaccination_coverage_in_percent) %>%
head(1) %>%
pull(country_name)
lowest_vacc_coverage_2020_number <- data2020 %>%
dplyr::arrange(vaccination_coverage_in_percent) %>%
head(1) %>%
pull(vaccination_coverage_in_percent) %>%
round(1)
highest_incidence_2020_country <- data2020 %>%
dplyr::arrange(-incidence) %>%
head(1) %>%
pull(country_name)
highest_incidence_2020_number <- data2020 %>%
dplyr::arrange(-incidence) %>%
head(1) %>%
pull(incidence) %>%
round(1)
#Get country shapes from rnaturalearth packages
country_shapes <- rnaturalearth::ne_countries()
#setdiff(data2020$country_code, country_shapes$adm0_a3)
#The difference are small islands. Ok to let them out.
#vaccination coverage map
vac_map <- left_join(country_shapes, data2020,
by = c("adm0_a3" = "country_code")) %>%
mutate(tooltip_label = paste0(country_name, " : ",
vaccination_coverage_in_percent, " %")) %>%
ggplot()+
geom_sf(aes(fill = vaccination_coverage_in_percent, text = tooltip_label))+
theme_void()+
theme(legend.position = "none")
vac_map_ggplotly <- ggplotly(vac_map, tooltip = "text")
#incidence map
inc_map <- left_join(country_shapes, data2020,
by = c("adm0_a3" = "country_code")) %>%
mutate(tooltip_label = paste0(country_name, " : ",
round(incidence, 2), " per 100000")) %>%
ggplot()+
geom_sf(aes(fill = incidence, text = tooltip_label))+
scale_fill_gradient(colors = color_scale,
name = "Incidence per 100 000",
breaks = c(0, 10, 50, 100, 500),
labels = c("0", "10", "50", "100", "500+"),
guide = guide_colorbar(barwidth = 10, barheight = 1)
) +
theme_void() +
theme(
legend.position = "right",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
#incidence map
inc_map <- left_join(country_shapes, data2020,
by = c("adm0_a3" = "country_code")) %>%
mutate(tooltip_label = paste0(country_name, " : ",
round(incidence, 2), " per 100000")) %>%
ggplot()+
geom_sf(aes(fill = incidence, text = tooltip_label))+
scale_fill_gradient(fill= color_scale,
name = "Incidence per 100 000",
breaks = c(0, 10, 50, 100, 500),
labels = c("0", "10", "50", "100", "500+"),
guide = guide_colorbar(barwidth = 10, barheight = 1)
) +
theme_void() +
theme(
legend.position = "right",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
#incidence map
inc_map <- left_join(country_shapes, data2020,
by = c("adm0_a3" = "country_code")) %>%
mutate(tooltip_label = paste0(country_name, " : ",
round(incidence, 2), " per 100000")) %>%
ggplot()+
geom_sf(aes(fill = incidence, text = tooltip_label))+
scale_fill_gradientn(colors = color_scale,
name = "Incidence per 100 000",
breaks = c(0, 10, 50, 100, 500),
labels = c("0", "10", "50", "100", "500+"),
guide = guide_colorbar(barwidth = 10, barheight = 1)
) +
theme_void() +
theme(
legend.position = "right",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
inc_map_ggplotly <- ggplotly(inc_map, tooltip = "text")
inc_map_ggplotly
table(data2020$incidence)
#incidence map
inc_map <- left_join(country_shapes, data2020,
by = c("adm0_a3" = "country_code")) %>%
mutate(tooltip_label = paste0(country_name, " : ",
round(incidence, 2), " per 100000")) %>%
ggplot()+
geom_sf(aes(fill = incidence, text = tooltip_label))+
scale_fill_gradientn(colors = color_scale,
name = "Incidence per 100 000",
breaks = c(0, 10, 50, 100, 500),
labels = c("0", "1", "5", "20", "50+"),
guide = guide_colorbar(barwidth = 10, barheight = 1)
) +
theme_void() +
theme(
legend.position = "right",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
inc_map_ggplotly <- ggplotly(inc_map, tooltip = "text")
inc_map_ggplotly
#incidence map
inc_map <- left_join(country_shapes, data2020,
by = c("adm0_a3" = "country_code")) %>%
mutate(tooltip_label = paste0(country_name, " : ",
round(incidence, 2), " per 100000")) %>%
ggplot()+
geom_sf(aes(fill = incidence, text = tooltip_label))+
scale_fill_gradientn(colors = color_scale,
name = "Incidence per 100 000",
breaks = c(0, 1, 5, 20, 50),
labels = c("0", "1", "5", "20", "50+"),
guide = guide_colorbar(barwidth = 10, barheight = 1)
) +
theme_void() +
theme(
legend.position = "right",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
table(data2020$vaccination_coverage_in_percent)
#incidence map
inc_map <- left_join(country_shapes, data2020,
by = c("adm0_a3" = "country_code")) %>%
mutate(tooltip_label = paste0(country_name, " : ",
round(incidence, 2), " per 100000")) %>%
ggplot()+
geom_sf(aes(fill = incidence, text = tooltip_label))+
scale_fill_gradientn(colors = color_scale,
name = "Incidence per 100 000",
breaks = c(0, 20, 50, 88.62),
labels = c("0", "20", "50", "88.62"),
guide = guide_colorbar(barwidth = 10, barheight = 1)
) +
theme_void() +
theme(
legend.position = "right",
legend.title = element_text(size = 12),
legend.text = element_text(size = 10)
)
# Load packages
if(!require(pacman)) install.packages("pacman")
pacman::p_load(here, readxl, tidyverse, countrycode, bslib, bsicons, shiny, rgeoboundaries, plotly, htmltools, reactable)
##Create a palette
color_scale <- c("#78c2ad", "#6caf9c", "#609b8a", "#548879", "#487468", "#3c6157", "#304e45", "#243a34", "#182723", "#0c1311", "#000000")
##Load data from csv and xls files as well as from the package rnaturalearth
vacc_measles_dataset <- read_csv(here("data/gapminder_mcv2_vacc.csv"))
counts_measles_dataset <- read_csv(here("data/who_measles_counts.csv"))
pop_raw <- read_xls(here("data/worldbankdata_API_SP.POP.TOTL_DS2_en_excel_v2_31647_modifiedcopy.xls"))
country_shapes <- rnaturalearth::ne_countries()
## Look at the data
# glimpse(vacc_measles_dataset)
# glimpse(child_death_measles_dataset)
# glimpse(counts_measles_dataset)
# glimpse(pop)
## Data cleaning
vacc_measles <- vacc_measles_dataset %>%
pivot_longer(cols = `2000`:`2020`, names_to = "year", values_to = "vaccination_coverage_in_percent") %>%
mutate(year = as.numeric(year)) %>%
filter(year >= 2010) %>%
rename(country_name = country)
counts_measles <- counts_measles_dataset %>%
select(ParentLocationCode, ParentLocation, SpatialDimValueCode, Location, Period, FactValueNumeric) %>%
rename(year = Period, country_code = SpatialDimValueCode,  country_name = Location, measles_cases = FactValueNumeric) %>%
filter(year >= 2010 & year <= 2020)
pop <- pop_raw %>% pivot_longer(cols = `1960`:`2023`, names_to = "year", values_to = "population") %>%
select(!c(`Indicator Name`, `Indicator Code`)) %>%
mutate(year = as.numeric(year)) %>%
filter(year >= 2010 & year <= 2020) %>%
rename(country_name = `Country Name`, country_code = `Country Code`)
## Data merging
#setdiff(counts_measles$country_code, pop$country_code)
#The output tell us that the following codes are not in pop: "AIA" "COK" "MSR" "NIU" "TKL" "WLF"
#From Chatgpt: These codes correspond to small islands and territories, many of which have unique political relationships, such as being dependencies or in free association with other countries.
#We can get rid of these.
#setdiff(pop$country_code, counts_measles$country_code)
#The output tell us that the following codes are missing in counts_measles: "AFE" "AFW" "ARB" "CEB" "CHI" "CSS" "EAP" "EAR" "EAS" "ECA" "ECS" "EMU" "EUU" "FCS" "FRO" "GIB" "GRL" "HIC" "HPC" "IBD" "IBT" "IDA" "IDB" "IDX" "IMN" "INX" "LAC" "LCN" "LDC" "LIC" "LIE" "LMC" "LMY" "LTE" "MAF" "MEA" "MIC" "MNA" "NAC" "OED" "OSS" "PRE" "PRI" "PSS" "PST" "SAS" "SSA" "SSF" "SST" "TEA" "TEC" "TLA" "TMN" "TSA" "TSS" "UMC" "VIR" "WLD" "XKX"
# From ChatGPT: These codes represent regions, income classifications, or groups of countries, rather than individual nations. Many of them are used by international organizations like the World Bank to classify countries by income level, development stage, or geographic area.
# We can get rid of these.
counts_measles <- counts_measles %>%
filter(!country_code %in% c("AIA", "COK", "MSR", "NIU", "TKL", "WLF"))
#With a left_join we get rid of the country codes in pop that we don't need.
merged_pop_cases <- left_join(counts_measles, pop, by = c("country_code", "year"))
#Get a county code for the vaccination dataset
vacc_measles <- vacc_measles %>%
mutate(country_code = countrycode(country_name,
"country.name",
"iso3c"))
#setdiff(merged_pop_cases$country_code, vacc_measles$country_code)
#The output shows that 30 country codes are missing in vacc_measles. These codes represent a mix of independent countries and territories across different regions of the world.
#We will keep these in.
#setdiff(vacc_measles$country_code, merged_pop_cases$country_code)
#All country codes in vacc_measles are present in merged_pop_cases.
#Merging with vacc and cleaning
merged_pop_cases_vacc <- left_join(merged_pop_cases,
vacc_measles,
by = c("country_code",
"year")) %>%
select(!c("country_name",
"country_name.x",
"country_name.y")) %>%
rename(region_code = ParentLocationCode,
region_name = ParentLocation) %>%
mutate(country_name = countrycode(country_code, origin = "iso3c", destination = "country.name"))
#Calculate incidence
merged_pop_cases_vacc <- merged_pop_cases_vacc %>%
mutate(incidence = measles_cases/population*100000)
##Wanted to use child mortality data, but I let this out, as I could not find information about the numbers and these seem strange. The numbers should be the number of child deaths, but there are numbers with decimals. So I commented this part out.
# child_death_measles_dataset <- read_csv(here("data/gapminder_measles_deaths_in_children_1_59_months_total_deaths.csv"))
# child_death_measles <- child_death_measles_dataset %>%
#   mutate(`2018` = as.character(`2018`),
#          `2019` = as.character(`2019`)) %>%
#   pivot_longer(cols = `1990`:`2019`, names_to = "year", values_to = "child_death") %>%
#   mutate(child_death = str_replace_all(child_death, pattern = "k", replacement = "e3") %>%
#   str_replace_all(pattern = "M", replacement = "e6") %>%
#   as.numeric(child_death))
data2020 <- merged_pop_cases_vacc %>%
dplyr::filter(year == 2020)
number_of_countries_in_dataset <- data2020 %>%
summarise(n = n())
number_of_countries_vacc_over_95_in2020 <- data2020 %>%
filter(vaccination_coverage_in_percent >=95) %>%
summarise(n = n())
number_of_countries_inc_lower_1_in2020 <- data2020 %>%
filter(incidence <=1) %>%
summarise(n = n())
number_of_countries_in_dataset
number_of_countries_in_dataset
View(number_of_countries_vacc_over_95_in2020)
View(number_of_countries_over_95_in2020)
View(number_of_countries_inc_lower_1_in2020)
View(number_of_countries_in_dataset)
perc_vacc_over_95 <- number_of_countries_vacc_over_95_in2020/number_of_countries_in_dataset*100
perc_vacc_over_95
prinr(perc_vacc_over_95)
print(perc_vacc_over_95)
number_of_countries_inc_lower_1_in2020 <- data2020 %>%
filter(incidence <1) %>%
summarise(n = n())
print(number_of_countries_inc_lower_1_in2020)
number_of_countries_inc_lower_1_in2020 <- data2020 %>%
filter(incidence < 1)
View(number_of_countries_inc_lower_1_in2020)
View(number_of_countries_in_dataset)
perc_inc_lower_1 <- number_of_countries_inc_lower_1_in2020/number_of_countries_in_dataset*100
number_of_countries_inc_lower_1_in2020 <- data2020 %>%
filter(incidence < 1) %>%
summarise(n = n())
perc_inc_lower_1 <- number_of_countries_inc_lower_1_in2020/number_of_countries_in_dataset*100
?value_box
number_of_countries_inc_lower_1_in2020 <- data2020 %>%
filter(incidence < 1) %>%
summarise(n = n())
perc_inc_lower_1 <- number_of_countries_inc_lower_1_in2020/number_of_countries_in_dataset*100
lowest_vacc_coverage_2020_country <- data2020 %>%
dplyr::arrange(vaccination_coverage_in_percent) %>%
head(1) %>%
pull(country_name)
lowest_vacc_coverage_2020_number <- data2020 %>%
dplyr::arrange(vaccination_coverage_in_percent) %>%
head(1) %>%
pull(vaccination_coverage_in_percent) %>%
round(1)
highest_incidence_2020_country <- data2020 %>%
dplyr::arrange(-incidence) %>%
head(1) %>%
pull(country_name)
